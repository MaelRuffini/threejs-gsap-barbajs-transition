{
  "version": 3,
  "sources": ["../../node_modules/babel-plugin-transform-async-to-promises/helpers.js", "../../@barba/core/src/modules/Logger.ts", "../../@barba/core/src/defs/hooks.ts", "../../node_modules/path-to-regexp/index.js", "../../@barba/core/src/schemas/attribute.ts", "../../@barba/core/src/utils/dom.ts", "../../@barba/core/src/utils/history.ts", "../../@barba/core/src/utils/helpers.ts", "../../@barba/core/src/utils/url.ts", "../../@barba/core/src/utils/request.ts", "../../node_modules/is-promise/index.js", "../../@barba/core/src/utils/run-async.ts", "../../@barba/core/src/hooks.ts", "../../@barba/core/src/modules/Ignore.ts", "../../@barba/core/src/modules/Cache.ts", "../../@barba/core/src/modules/Prevent.ts", "../../@barba/core/src/modules/Error.ts", "../../@barba/core/src/modules/Store.ts", "../../@barba/core/src/modules/Transitions.ts", "../../@barba/core/src/modules/Views.ts", "../../@barba/core/src/polyfills/index.ts", "../../@barba/core/src/schemas/page.ts", "../../@barba/core/src/core.ts", "dep:@barba_core"],
  "sourcesContent": ["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n", "/**\n * @barba/core/modules/Logger\n * <br><br>\n * ## Logger.\n *\n * - Display informations via the console\n *\n * @module core/modules/Logger\n * @preferred\n */\n\n/***/\n\n/**\n * Log levels, all lower level messages are printed\n *\n * 0. mute\n * 1. error = `console.error()`\n * 2. warning= `console.warn()`\n * 3. info = `console.info()`\n * 4. debug = `console.log()`\n */\nexport enum LogLevels {\n  off = 0,\n  error = 1,\n  warning = 2,\n  info = 3,\n  debug = 4,\n}\n\n/**\n * Global log level\n */\nlet _level: number = LogLevels.off;\n\nexport class Logger {\n  /**\n   * Get global log level.\n   */\n  public static getLevel(): number {\n    return _level;\n  }\n\n  /**\n   * Set global log level.\n   */\n  public static setLevel(name: keyof typeof LogLevels): number {\n    _level = LogLevels[name];\n\n    return _level;\n  }\n\n  /**\n   * Log \"prefix\".\n   */\n  private _source: string;\n\n  /**\n   * Creates an instance of Logger.\n   */\n  constructor(source: string) {\n    this._source = source;\n  }\n\n  /**\n   * Permanent, unremovable log.\n   */\n  // public print(...objects: any[]): void {\n  //   this._log(console.info, LogLevels.off, objects);\n  // }\n\n  /**\n   * Error log.\n   */\n  public error(...objects: any[]): void {\n    this._log(console.error, LogLevels.error, objects);\n  }\n\n  /**\n   * Warn log.\n   */\n  public warn(...objects: any[]): void {\n    this._log(console.warn, LogLevels.warning, objects);\n  }\n\n  /**\n   * Info log.\n   */\n  public info(...objects: any[]): void {\n    this._log(console.info, LogLevels.info, objects);\n  }\n\n  /**\n   * Debug log.\n   */\n  public debug(...objects: any[]): void {\n    this._log(console.log, LogLevels.debug, objects);\n  }\n\n  /**\n   * Internal logger.\n   */\n  private _log(fn: () => void, level: number, objects: any[]): void {\n    if (level <= Logger.getLevel()) {\n      fn.apply(console, ([`[${this._source}] `].concat(objects) as unknown) as [\n\n      ]);\n    }\n  }\n}\n", "/**\n * @module typings/core\n */\nimport { ITransitionData, ITransitionPage, IViewData } from './index';\n\nexport type HooksBarba =\n  | 'ready'\n  | 'page'\n  | 'reset'\n  | 'currentAdded'\n  | 'currentRemoved'\n  | 'nextAdded'\n  | 'nextRemoved';\n\nexport type HooksOnce = 'beforeOnce' | 'once' | 'afterOnce';\n\nexport type HooksPage =\n  | 'before'\n  | 'beforeLeave'\n  | 'leave'\n  | 'afterLeave'\n  | 'beforeEnter'\n  | 'enter'\n  | 'afterEnter'\n  | 'after';\n\nexport type HooksBefore = 'beforeOnce' | 'beforeLeave' | 'beforeEnter';\nexport type HooksAfter = 'afterOnce' | 'afterLeave' | 'afterEnter';\n\nexport type HooksTransition = HooksOnce | HooksPage;\nexport type HooksView = HooksBefore | HooksAfter;\nexport type HooksAll = HooksBarba | HooksTransition;\n\n// Allow optional \"dynamically created\" hooks\nexport type HooksTransitionMap = { [key in HooksTransition]?: any };\n\nexport type HookFunction = (\n  data?: ITransitionData | IViewData,\n  t?: ITransitionPage\n) => Promise<void> | void;\n\nexport class HookMethods {\n  public before: (fn: HookFunction, ctx?: any) => void;\n  public beforeLeave: (fn: HookFunction, ctx?: any) => void;\n  public leave: (fn: HookFunction, ctx?: any) => void;\n  public afterLeave: (fn: HookFunction, ctx?: any) => void;\n  public beforeEnter: (fn: HookFunction, ctx?: any) => void;\n  public enter: (fn: HookFunction, ctx?: any) => void;\n  public afterEnter: (fn: HookFunction, ctx?: any) => void;\n  public after: (fn: HookFunction, ctx?: any) => void;\n}\n", "/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.match = match\nmodule.exports.regexpToFunction = regexpToFunction\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = '/'\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \":test(\\\\d+)?\" => [\"test\", \"\\d+\", undefined, \"?\"]\n  // \"(\\\\d+)\"  => [undefined, undefined, \"\\d+\", undefined]\n  '(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = (options && options.delimiter) || DEFAULT_DELIMITER\n  var whitelist = (options && options.whitelist) || undefined\n  var pathEscaped = false\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) !== null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      pathEscaped = true\n      continue\n    }\n\n    var prev = ''\n    var name = res[2]\n    var capture = res[3]\n    var group = res[4]\n    var modifier = res[5]\n\n    if (!pathEscaped && path.length) {\n      var k = path.length - 1\n      var c = path[k]\n      var matches = whitelist ? whitelist.indexOf(c) > -1 : true\n\n      if (matches) {\n        prev = c\n        path = path.slice(0, k)\n      }\n    }\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n      pathEscaped = false\n    }\n\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var pattern = capture || group\n    var delimiter = prev || defaultDelimiter\n\n    tokens.push({\n      name: name || key++,\n      prefix: prev,\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      pattern: pattern\n        ? escapeGroup(pattern)\n        : '[^' + escapeString(delimiter === defaultDelimiter ? delimiter : (delimiter + defaultDelimiter)) + ']+?'\n    })\n  }\n\n  // Push any remaining characters.\n  if (path || index < str.length) {\n    tokens.push(path + str.substr(index))\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nfunction match (str, options) {\n  var keys = []\n  var re = pathToRegexp(str, keys, options)\n  return regexpToFunction(re, keys)\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nfunction regexpToFunction (re, keys) {\n  return function (pathname, options) {\n    var m = re.exec(pathname)\n    if (!m) return false\n\n    var path = m[0]\n    var index = m.index\n    var params = {}\n    var decode = (options && options.decode) || decodeURIComponent\n\n    for (var i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue\n\n      var key = keys[i - 1]\n\n      if (key.repeat) {\n        params[key.name] = m[i].split(key.delimiter).map(function (value) {\n          return decode(value, key)\n        })\n      } else {\n        params[key.name] = decode(m[i], key)\n      }\n    }\n\n    return { path: path, index: index, params: params }\n  }\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (data, options) {\n    var path = ''\n    var encode = (options && options.encode) || encodeURIComponent\n    var validate = options ? options.validate !== false : true\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n        continue\n      }\n\n      var value = data ? data[token.name] : undefined\n      var segment\n\n      if (Array.isArray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but got array')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) continue\n\n          throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j], token)\n\n          if (validate && !matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\"')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n        segment = encode(String(value), token)\n\n        if (validate && !matches[i].test(segment)) {\n          throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but got \"' + segment + '\"')\n        }\n\n        path += token.prefix + segment\n        continue\n      }\n\n      if (token.optional) continue\n\n      throw new TypeError('Expected \"' + token.name + '\" to be ' + (token.repeat ? 'an array' : 'a string'))\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$/()])/g, '\\\\$1')\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {Array=}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  if (!keys) return path\n\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        pattern: null\n      })\n    }\n  }\n\n  return path\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  return new RegExp('(?:' + parts.join('|') + ')', flags(options))\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}  tokens\n * @param  {Array=}  keys\n * @param  {Object=} options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  options = options || {}\n\n  var strict = options.strict\n  var start = options.start !== false\n  var end = options.end !== false\n  var delimiter = options.delimiter || DEFAULT_DELIMITER\n  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|')\n  var route = start ? '^' : ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var capture = token.repeat\n        ? '(?:' + token.pattern + ')(?:' + escapeString(token.delimiter) + '(?:' + token.pattern + '))*'\n        : token.pattern\n\n      if (keys) keys.push(token)\n\n      if (token.optional) {\n        if (!token.prefix) {\n          route += '(' + capture + ')?'\n        } else {\n          route += '(?:' + escapeString(token.prefix) + '(' + capture + '))?'\n        }\n      } else {\n        route += escapeString(token.prefix) + '(' + capture + ')'\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += '(?:' + escapeString(delimiter) + ')?'\n\n    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')'\n  } else {\n    var endToken = tokens[tokens.length - 1]\n    var isEndDelimited = typeof endToken === 'string'\n      ? endToken[endToken.length - 1] === delimiter\n      : endToken === undefined\n\n    if (!strict) route += '(?:' + escapeString(delimiter) + '(?=' + endsWith + '))?'\n    if (!isEndDelimited) route += '(?=' + escapeString(delimiter) + '|' + endsWith + ')'\n  }\n\n  return new RegExp(route, flags(options))\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {Array=}                keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, keys)\n  }\n\n  if (Array.isArray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), keys, options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), keys, options)\n}\n", "/**\n * @barba/core/schemas\n * <br><br>\n * ## Schemas description.\n *\n * @module core/schemas\n * @preferred\n */\n\n/***/\n\n// Definitions\nimport { ISchemaAttribute } from '../defs';\n\n/**\n * See [[ISchemaAttribute]]\n */\nexport const schemaAttribute: ISchemaAttribute = {\n  container: 'container',\n  history: 'history',\n  namespace: 'namespace',\n  prefix: 'data-barba',\n  prevent: 'prevent',\n  wrapper: 'wrapper',\n};\n", "/**\n * @barba/core/utils/dom\n * <br><br>\n * ## Dom utils\n *\n * - Access DOM contents\n * - DOM vs string conversions\n *\n * @module core/utils/dom\n * @preferred\n */\n\n/***/\n\nimport path from 'path';\n\n// Definitions\nimport { ISchemaAttribute, Link, Scope, Wrapper } from '../defs';\n// Schemas\nimport { schemaAttribute } from '../schemas/attribute';\n\nexport class Dom {\n  private _attr: ISchemaAttribute = schemaAttribute;\n  private _parser: DOMParser = new DOMParser();\n\n  /**\n   * Convert HTMLDocument to string.\n   */\n  public toString(el: HTMLElement): string {\n    return el.outerHTML;\n  }\n\n  /**\n   * Parse HTML string to HTMLDocument.\n   */\n  // see https://github.com/barbajs/barba/issues/362\n  // Seems that using DOMParser.parseFromString causes this issue.\n  public toDocument(htmlString: string): HTMLDocument {\n    return this._parser.parseFromString(htmlString, 'text/html');\n  }\n\n  /**\n   * Parse HTML string to DIVElement.\n   *\n   * DOMParser.parseFromString fails with img[srcset] on iOS.\n   * see https://github.com/barbajs/barba/issues/362\n   */\n  public toElement(htmlString: string): HTMLDivElement {\n    const div = document.createElement('div');\n\n    div.innerHTML = htmlString;\n    return div;\n  }\n\n  /**\n   * Get HTML content.\n   */\n  public getHtml(doc: HTMLDocument = document): string {\n    return this.toString(doc.documentElement);\n  }\n\n  /**\n   * Get full document content.\n   */\n  // getDocument(el = document.documentElement) {\n  //   return this.toStr(el);\n  // },\n\n  /**\n   * Get `[data-barba=\"wrapper\"]`.\n   */\n  public getWrapper(scope: Scope = document): Wrapper {\n    return scope.querySelector(\n      `[${this._attr.prefix}=\"${this._attr.wrapper}\"]`\n    );\n  }\n\n  /**\n   * Get `[data-barba=\"container\"]`.\n   */\n  public getContainer(scope: Scope = document): HTMLElement | null {\n    return scope.querySelector(\n      `[${this._attr.prefix}=\"${this._attr.container}\"]`\n    );\n  }\n\n  /**\n   * Remove container and store next sibling (if applicable).\n   */\n  public removeContainer(container: HTMLElement) {\n    if (document.body.contains(container)) {\n      container.parentNode.removeChild(container);\n    }\n  }\n\n  /**\n   * Add container before next sibling or at the end of the wrapper.\n   */\n  public addContainer(container: HTMLElement, wrapper: HTMLElement) {\n    const existingContainer = this.getContainer();\n\n    if (existingContainer) {\n      this._insertAfter(container, existingContainer);\n    } else {\n      wrapper.appendChild(container);\n    }\n  }\n\n  /**\n   * Get `[data-barba-namespace]`.\n   */\n  public getNamespace(scope: Scope = document): string | null {\n    const ns = scope.querySelector(\n      `[${this._attr.prefix}-${this._attr.namespace}]`\n    );\n\n    return ns\n      ? ns.getAttribute(`${this._attr.prefix}-${this._attr.namespace}`)\n      : null;\n  }\n\n  /**\n   * Get URL from `href` value.\n   */\n  public getHref(el: Link): string | null {\n    // HTML tagName is UPPERCASE, xhtml tagName keeps existing case.\n    if (el.tagName && el.tagName.toLowerCase() === 'a') {\n      // HTMLAnchorElement, full URL available\n      if (typeof el.href === 'string') {\n        return el.href;\n      }\n\n      // Probably a SVGAElement\u2026\n      const href = el.getAttribute('href') || el.getAttribute('xlink:href');\n\n      /* istanbul ignore else */\n      if (href) {\n        // When link comes from SVG, `href` returns an object, not a string.\n        const attr: string =\n          ((href as unknown) as SVGAnimatedString).baseVal || href;\n\n        return this.resolveUrl(attr);\n      }\n    }\n    return null;\n  }\n\n  // Copyright 2014 Simon Lydell\n  // X11 (\u201CMIT\u201D) Licensed. (See LICENSE\n  // https://github.com/lydell/resolve-url/blob/master/resolve-url.js\n  /* istanbul ignore next */\n  public resolveUrl(...urls: string[]) {\n    const numUrls = urls.length;\n\n    if (numUrls === 0) {\n      throw new Error('resolveUrl requires at least one argument; got none.');\n    }\n\n    const base = document.createElement('base');\n    base.href = arguments[0];\n\n    if (numUrls === 1) {\n      return base.href;\n    }\n\n    const head = document.getElementsByTagName('head')[0];\n    head.insertBefore(base, head.firstChild);\n\n    const a = document.createElement('a');\n    let resolved;\n\n    for (let index = 1; index < numUrls; index++) {\n      a.href = arguments[index];\n      resolved = a.href;\n      base.href = resolved;\n    }\n\n    head.removeChild(base);\n\n    return resolved;\n  }\n\n  /**\n   * Insert node after another node.\n   */\n  private _insertAfter(newNode: Node, referenceNode: Node) {\n    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n  }\n}\n\nconst dom = new Dom();\n\nexport { dom };\n", "import { HistoryAction, LinkEvent, Trigger } from '../defs';\n// Schemas\nimport { schemaAttribute } from '../schemas/attribute';\n\n/**\n * @barba/core/utils/history\n * <br><br>\n * ## History manager.\n *\n * - Keep track of the navigation history\n *\n * @module core/utils/history\n * @preferred\n */\n\n/**\n * State item.\n *\n * @property from\n * @property index\n */\ninterface IHistoryItem {\n  /** origin */\n  from: string;\n  /** index */\n  index: number;\n  /** states */\n  states: IStateItem[];\n}\n\n/***/\ninterface ICoords {\n  x: number;\n  y: number;\n}\n\n/**\n * History item.\n *\n * @property namespace\n * @property scroll\n * @property URL\n */\ninterface IStateItem {\n  /** namespace */\n  ns: string | undefined;\n  /** Scroll position */\n  scroll: ICoords;\n  /** URL */\n  url: string;\n}\n\nexport class History {\n  private _session: string;\n  private _states: IStateItem[] = [];\n  private _pointer = -1;\n\n  /**\n   * Init with first state.\n   */\n  public init(url: string, ns: string): void {\n    this._session = 'barba';\n    const index = 0;\n\n    const state: IStateItem = {\n      ns,\n      scroll: {\n        x: window.scrollX,\n        y: window.scrollY,\n      },\n      url,\n    };\n\n    this._states.push(state);\n    this._pointer = index;\n\n    const item: IHistoryItem = {\n      from: this._session,\n      index,\n      states: [...this._states],\n    };\n\n    window.history && window.history.replaceState(item, '', url);\n  }\n\n  public change(\n    url: string,\n    trigger: Trigger,\n    e?: LinkEvent | PopStateEvent\n  ): Trigger {\n    if (e && (e as PopStateEvent).state) {\n      // If popstate, move to existing state\n      // and get back/forward direction.\n      const { state }: { state: IHistoryItem } = e as PopStateEvent;\n      const { index } = state;\n      const diff = this._pointer - index;\n\n      trigger = this._getDirection(diff);\n\n      // Work with previous states\n      this.replace(state.states);\n      this._pointer = index;\n    } else {\n      // Add new state\n      this.add(url, trigger);\n    }\n\n    return trigger;\n  }\n\n  /**\n   * Add a new state.\n   */\n  public add(url: string, trigger: Trigger): void {\n    // If no state, it will be updated later.\n    const ns = 'tmp';\n    const index = this.size;\n    const action = this._getAction(trigger);\n    const state: IStateItem = {\n      ns,\n      scroll: {\n        x: window.scrollX,\n        y: window.scrollY,\n      },\n      url,\n    };\n\n    this._states.push(state);\n    this._pointer = index;\n\n    const item: IHistoryItem = {\n      from: this._session,\n      index,\n      states: [...this._states],\n    };\n\n    switch (action) {\n      case 'push':\n        window.history && window.history.pushState(item, '', url);\n        break;\n      case 'replace':\n        window.history && window.history.replaceState(item, '', url);\n        break;\n      /* istanbul ignore next */\n      default:\n    }\n  }\n\n  /**\n   * Update state.\n   */\n  public update(data: any, i?: number): void {\n    const index = i || this._pointer;\n    const existing = this.get(index);\n    const state: IStateItem = {\n      ...existing,\n      ...data,\n    };\n\n    this.set(index, state);\n  }\n\n  /**\n   * Remove last state.\n   */\n  public remove(i?: number): void {\n    if (i) {\n      this._states.splice(i, 1);\n    } else {\n      this._states.pop();\n    }\n\n    this._pointer--;\n  }\n\n  /**\n   * Delete all states.\n   */\n  public clear(): void {\n    this._states = [];\n    this._pointer = -1;\n  }\n\n  /**\n   * Replace all states.\n   */\n  public replace(newStates: IStateItem[]): void {\n    this._states = newStates;\n  }\n\n  /**\n   * Get state by index.\n   */\n  public get(index: number) {\n    return this._states[index];\n  }\n\n  /**\n   * Set state by index.\n   */\n  public set(i: number, state: IStateItem) {\n    return (this._states[i] = state);\n  }\n\n  /**\n   * Get the current state.\n   */\n  get current(): IStateItem {\n    return this._states[this._pointer];\n  }\n\n  /**\n   * Get the last state (top of the history stack).\n   */\n  get state(): IStateItem {\n    return this._states[this._states.length - 1];\n  }\n\n  /**\n   * Get the previous state.\n   */\n  get previous(): IStateItem | null {\n    return this._pointer < 1 ? null : this._states[this._pointer - 1];\n  }\n\n  /**\n   * Get the state size.\n   */\n  get size(): number {\n    return this._states.length;\n  }\n\n  /**\n   * Get the history action: push vs replace\n   */\n  private _getAction(trigger: Trigger): HistoryAction {\n    let action: HistoryAction = 'push';\n\n    // Manage `data-barba-history` attribute\n    // to get the right action (push vs replace).\n    const el = trigger as HTMLAnchorElement;\n    const attr = `${schemaAttribute.prefix}-${schemaAttribute.history}`;\n\n    if (el.hasAttribute && el.hasAttribute(attr)) {\n      action = el.getAttribute(attr) as HistoryAction;\n    }\n\n    return action;\n  }\n\n  /**\n   * Get the direction of popstate change\n   */\n  private _getDirection(diff: number): Trigger {\n    // Check if \"session switch\"\n    if (Math.abs(diff) > 1) {\n      // Ex 6-0 > 0 -> forward, 0-6 < 0 -> back\n      return diff > 0 ? 'forward' : 'back';\n    } else {\n      if (diff === 0) {\n        return 'popstate';\n      } else {\n        // Ex 6-5 > 0 -> back, 5-6 < 0 -> forward\n        return diff > 0 ? 'back' : 'forward';\n      }\n    }\n  }\n}\n\nconst history = new History();\n\nexport { history };\n", "/**\n * @barba/core/utils/helpers\n * <br><br>\n * ## Helpers\n *\n * - Update next page data\n *\n * @module core/utils/helpers\n * @preferred\n */\n\n/***/\n\n// Third-party\nimport ptr from 'path-to-regexp';\n// Definitions\nimport { ITransitionData } from '../defs';\n// Utils\nimport { dom } from './dom';\nimport { history } from './history';\n\n/**\n * Update `data.next`, the title and the history\n */\nexport const update = async (\n  page: Promise<string | void>,\n  data: ITransitionData\n): Promise<void> => {\n  // If not already updated\n  if (!data.next.html) {\n    const html = await page;\n    const { next } = data;\n\n    if (html) {\n      // see: https://github.com/barbajs/barba/issues/362\n      // const nextDocument = dom.toDocument(html);\n      const nextDocument = dom.toElement(html);\n\n      next.namespace = dom.getNamespace(nextDocument);\n      next.container = dom.getContainer(nextDocument);\n      // see https://github.com/barbajs/barba/issues/362\n      // next.html = dom.getHtml(nextDocument);\n      // next.html = nextDocument.innerHTML;\n      next.html = html;\n\n      // Update history namespace (not available when initially set)\n      history.update({ ns: next.namespace });\n\n      // Update title.\n      const { title } = dom.toDocument(html);\n\n      document.title = title;\n    }\n  }\n};\n\n/**\n * Next tick\n */\nexport const nextTick = () =>\n  new Promise(resolve => {\n    window.requestAnimationFrame(resolve);\n    // DEV: same result?\n    // setTimeout(resolve, 0);\n  });\n\n/**\n * Turn a route string such as `/user/:name` into a regular expression.\n *\n * Used for:\n *\n * - routes to ignore\n * - route transition resolution\n *\n * @see https://www.npmjs.com/package/path-to-regexp\n */\nconst pathToRegexp = ptr;\n\nexport { pathToRegexp };\n", "/**\n * @barba/core/utils/url\n * <br><br>\n * ## URL utils.\n *\n * - Collect and structure informations from URLs\n *\n * @module core/utils/url\n */\n\n/***/\n\n// Definitions\nimport { IGenericObject, IUrlBase } from '../defs';\n\n/**\n * Get location href.\n */\nexport const getHref = () => window.location.href;\n\n/**\n * Get location origin.\n */\nexport const getOrigin = () => window.location.origin;\n\n/**\n * Get port based on URL or location.\n */\nexport const getPort = (url: string = window.location.href) => parse(url).port;\n\n/**\n * Get path from URL.\n */\nexport const getPath = (url: string = window.location.href) => parse(url).path;\n\n/**\n * Get query object from URL.\n */\n// export const getQuery = (url: string): IGenericObject => parse(url).query;\n\n/**\n * Get hash from URL.\n */\n// export const getHash = (url: string): string => parse(url).hash;\n\n/**\n * Parse URL for path, query and hash and more.\n */\nexport const parse = (url: string): IUrlBase => {\n  // Port\n  let port;\n  const matches = url.match(/:\\d+/);\n\n  if (matches === null) {\n    if (/^http/.test(url)) {\n      port = 80;\n    }\n\n    if (/^https/.test(url)) {\n      port = 443;\n    }\n  } else {\n    const portString = matches[0].substring(1);\n\n    port = parseInt(portString, 10);\n  }\n\n  // Path\n  let path = url.replace(getOrigin(), '');\n  let hash;\n  let query = {};\n\n  // Hash\n  const hashIndex = path.indexOf('#');\n\n  if (hashIndex >= 0) {\n    hash = path.slice(hashIndex + 1);\n    path = path.slice(0, hashIndex);\n  }\n\n  // Query\n  const queryIndex = path.indexOf('?');\n\n  if (queryIndex >= 0) {\n    query = parseQuery(path.slice(queryIndex + 1));\n    path = path.slice(0, queryIndex);\n  }\n\n  return {\n    hash,\n    path,\n    port,\n    query,\n  };\n};\n\n/**\n * Parse a query string to object.\n */\nexport const parseQuery = (str: string) =>\n  str.split('&').reduce((acc: IGenericObject, el: string) => {\n    const [key, value] = el.split('=');\n\n    acc[key] = value;\n\n    return acc;\n  }, {});\n\n/**\n * Clean URL, remove \"hash\" and/or \"trailing slash\".\n */\nexport const clean = (url: string = window.location.href) =>\n  url.replace(/(\\/#.*|\\/|#.*)$/, '');\n", "/**\n * @barba/core/utils/request\n * <br><br>\n * ## Fetch pages for transitions.\n *\n * - Includes timeout\n * - Uses Fetch API\n * - Handles errors\n *\n * @module core/utils/request\n * @preferred\n */\n\n/***/\n\n// Definitions\nimport { RequestError } from '../defs';\n\n/**\n * Init a page request.\n * Fetch the page and returns a promise with the text content.\n */\nfunction request(\n  url: string,\n  ttl: number = 2e3,\n  requestError: RequestError\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE) {\n        if (xhr.status === 200) {\n          resolve(xhr.responseText);\n        } else if (xhr.status) {\n          // HTTP code is not 200, reject with response.\n          const res = {\n            status: xhr.status,\n            statusText: xhr.statusText,\n          };\n          requestError(url, res);\n          reject(res);\n        }\n      }\n    };\n    xhr.ontimeout = () => {\n      const err = new Error(`Timeout error [${ttl}]`);\n      requestError(url, err);\n      reject(err);\n    };\n    xhr.onerror = () => {\n      const err = new Error(`Fetch error`);\n      requestError(url, err);\n      reject(err);\n    };\n\n    xhr.open('GET', url);\n    xhr.timeout = ttl;\n    xhr.setRequestHeader(\n      'Accept',\n      'text/html,application/xhtml+xml,application/xml'\n    );\n    xhr.setRequestHeader('x-barba', 'yes');\n    xhr.send();\n  });\n}\n\nexport { request };\n", "module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n", "import isPromise from 'is-promise';\n\n// https://github.com/SBoudrias/run-async\n/* istanbul ignore next */\nexport function runAsync(\n  func: (...args: any[]) => void | Promise<any>,\n  ctx: any = {}\n): (...args: any[]) => Promise<any> {\n  return (...args: any[]) => {\n    let async = false;\n\n    const promise = new Promise((resolve, reject) => {\n      // Add async to context\n      ctx.async = () => {\n        async = true;\n\n        return (err: any, value: any) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(value);\n          }\n        };\n      };\n\n      const answer = func.apply(ctx, args as []);\n\n      if (!async) {\n        if (isPromise(answer)) {\n          (answer as Promise<any>).then(resolve, reject);\n        } else {\n          resolve(answer);\n        }\n      }\n    });\n\n    return promise;\n  };\n}\n", "/**\n * @barba/core/modules/hooks\n * <br><br>\n * ## Hooks manager.\n *\n * - Register and trigger hooks\n *\n * Hooks can be easily registered:\n *\n * ```js\n * hooks.leave(callback, context);\n * ```\n *\n * @module core/modules/hooks\n * @preferred\n */\n\n/***/\n\n// Definitions\nimport { HookFunction, HookMethods, HooksAll } from './defs';\n// Modules\nimport { Logger } from './modules/Logger';\n// Utils\nimport { runAsync } from './utils';\n// Types\ninterface IHookInfos {\n  ctx: any;\n  fn: HookFunction;\n}\n\nexport class Hooks extends HookMethods {\n  /**\n   * Allow the use of `hooks[name](cb, ctx)`.\n   */\n  [key: string]: any;\n  // [key in HooksAll]?: any;\n  public logger: Logger = new Logger('@barba/core');\n  /**\n   * All available hooks.\n   *\n   * See [[HooksAll]]\n   */\n  // TODO: get hooks from defs (DRY)?\n  public all: HooksAll[] = [\n    'ready',\n    'page',\n    'reset',\n    'currentAdded',\n    'currentRemoved',\n    'nextAdded',\n    'nextRemoved',\n    'beforeOnce',\n    'once',\n    'afterOnce',\n    'before',\n    'beforeLeave',\n    'leave',\n    'afterLeave',\n    'beforeEnter',\n    'enter',\n    'afterEnter',\n    'after',\n  ];\n  /**\n   * Registered hooks.\n   *\n   * - Unique hook name\n   * - Associated data set(s) (callback + context)\n   */\n  public registered: Map<HooksAll, Set<IHookInfos>> = new Map();\n\n  constructor() {\n    super();\n    this.init();\n  }\n\n  public init() {\n    this.registered.clear();\n    this.all.forEach(hook => {\n      if (!this[hook]) {\n        this[hook] = (fn: HookFunction, ctx?: any) => {\n          if (!this.registered.has(hook)) {\n            this.registered.set(hook, new Set());\n          }\n          const set = this.registered.get(hook);\n\n          set.add({\n            ctx: ctx || {},\n            fn,\n          });\n        };\n      }\n    });\n  }\n\n  /**\n   * Do hook.\n   *\n   * Trigger registered hooks.\n   */\n  public do(name: HooksAll, ...args: any): Promise<any> {\n    if (this.registered.has(name)) {\n      // Let's start a chain of promises\n      let chain = Promise.resolve();\n\n      this.registered.get(name).forEach(hook => {\n        // Chain async hooks promisified\n        chain = chain.then(() => runAsync(hook.fn, hook.ctx)(...args));\n      });\n\n      return chain.catch(error => {\n        this.logger.debug(`Hook error [${name}]`);\n        this.logger.error(error);\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n  public clear(): void {\n    this.all.forEach(hook => {\n      delete this[hook];\n    });\n\n    this.init();\n  }\n\n  /**\n   * Help, print available and registered hooks.\n   */\n  public help(): void {\n    this.logger.info(`Available hooks: ${this.all.join(',')}`);\n    const registered: string[] = [];\n    this.registered.forEach((value, key) => registered.push(key));\n    this.logger.info(`Registered hooks: ${registered.join(',')}`);\n  }\n}\n\nconst hooks = new Hooks();\n\nexport { hooks };\n", "/**\n * @barba/core/modules/ignore\n * <br><br>\n * ## Manage ignore options.\n *\n * - cache\n * - prefetch\n *\n * @module core/modules/ignore\n * @preferred\n */\n\n/***/\n\n// Definitions\nimport { IgnoreOption } from '../defs';\n// Utils\nimport { pathToRegexp } from '../utils/helpers';\nimport { parse } from '../utils/url';\n\nexport class Ignore {\n  private _ignoreAll: boolean;\n  private _ignoreRegexes: RegExp[] = [];\n\n  constructor(ignore: IgnoreOption) {\n    if (typeof ignore === 'boolean') {\n      this._ignoreAll = ignore;\n    } else {\n      const paths = Array.isArray(ignore) ? ignore : [ignore];\n\n      this._ignoreRegexes = paths.map(p => pathToRegexp(p));\n    }\n  }\n\n  public checkHref(href: string): boolean {\n    if (typeof this._ignoreAll === 'boolean') {\n      return this._ignoreAll;\n    }\n\n    const { path } = parse(href);\n\n    return this._ignoreRegexes.some(regex => regex.exec(path) !== null);\n  }\n}\n", "/**\n * @barba/core/modules/cache\n * <br><br>\n * ## Cache for storing URL / HTML.\n *\n * @module core/modules/cache\n * @preferred\n */\n\n/***/\n\n// Definitions\nimport { CacheAction, CacheRequest, ICacheData, IgnoreOption } from '../defs';\n// Modules\nimport { Ignore } from './Ignore';\n\nexport class Cache extends Ignore {\n  private _state: Map<string, ICacheData> = new Map();\n\n  constructor(ignore: IgnoreOption) {\n    super(ignore);\n  }\n\n  /**\n   * Set value to cache\n   */\n  public set(\n    href: string,\n    request: CacheRequest,\n    action: CacheAction\n  ): ICacheData {\n    this._state.set(href, {\n      action,\n      request,\n    });\n\n    return {\n      action,\n      request,\n    };\n  }\n\n  /**\n   * Get data from cache\n   */\n  public get(href: string): ICacheData {\n    return this._state.get(href);\n  }\n\n  /**\n   * Get request from cache\n   */\n  public getRequest(href: string): CacheRequest {\n    return this._state.get(href).request;\n  }\n\n  /**\n   * Get action from cache\n   */\n  public getAction(href: string): CacheAction {\n    return this._state.get(href).action;\n  }\n\n  /**\n   * Check if value exists into cache\n   */\n  public has(href: string): boolean {\n    /* istanbul ignore else */\n    if (this.checkHref(href)) {\n      return false;\n    }\n    return this._state.has(href);\n  }\n\n  /**\n   * Delete value from cache\n   */\n  public delete(href: string): boolean {\n    return this._state.delete(href);\n  }\n\n  /**\n   * Update cache value\n   */\n  public update(href: string, data: ICacheData): ICacheData {\n    const state = {\n      ...this._state.get(href),\n      ...data,\n    };\n    this._state.set(href, state);\n\n    return state;\n  }\n}\n", "/**\n * @barba/core/modules/prevent\n * <br><br>\n * ## Prevent checks.\n *\n * - Gathers all the tests that allow Barba to work and play transitions\n *\n * @module core/modules/prevent\n * @preferred\n */\n\n/***/\n\n// Definitions\nimport { IgnoreOption, Link, PreventCheck } from '../defs';\n// Schemas\nimport { schemaAttribute } from '../schemas/attribute';\n// Utils\nimport { url } from '../utils';\n// Modules\nimport { Ignore } from './Ignore';\n\n/**\n * Make sure the browser supports `history.pushState`.\n */\nconst pushState: PreventCheck = () => !window.history.pushState;\n\n/**\n * Make sure there is an `el` and `href`.\n */\nconst exists: PreventCheck = ({ el, href }) => !el || !href;\n\n/**\n * If the user is pressing ctrl + click, the browser will open a new tab.\n */\nconst newTab: PreventCheck = ({ event }) =>\n  (event as KeyboardEvent).which > 1 ||\n  (event as KeyboardEvent).metaKey ||\n  (event as KeyboardEvent).ctrlKey ||\n  (event as KeyboardEvent).shiftKey ||\n  (event as KeyboardEvent).altKey;\n\n/**\n * If the link has `_blank` target.\n */\nconst blank: PreventCheck = ({ el }) =>\n  el.hasAttribute('target') && (el as Link).target === '_blank';\n\n/**\n * If the domain is the same (in order to avoid pushState cross origin security problem).\n * Note: SVGAElement do not have `protocol` neither `hostname` properties.\n */\nconst corsDomain: PreventCheck = ({ el }) =>\n  ((el as HTMLAnchorElement).protocol !== undefined &&\n    window.location.protocol !== (el as HTMLAnchorElement).protocol) ||\n  ((el as HTMLAnchorElement).hostname !== undefined &&\n    window.location.hostname !== (el as HTMLAnchorElement).hostname);\n\n/**\n * If the port is the same.\n * Note: SVGAElement do not have `port` property.\n */\nconst corsPort: PreventCheck = ({ el }) =>\n  (el as HTMLAnchorElement).port !== undefined &&\n  url.getPort() !== url.getPort((el as HTMLAnchorElement).href);\n\n/**\n * If the link has download attribute.\n */\nconst download: PreventCheck = ({ el }) =>\n  el.getAttribute && typeof el.getAttribute('download') === 'string';\n\n/**\n * If the links contains [data-barba-prevent] or [data-barba-prevent=\"self\"].\n */\nconst preventSelf: PreventCheck = ({ el }) =>\n  el.hasAttribute(`${schemaAttribute.prefix}-${schemaAttribute.prevent}`);\n\n/**\n * If some link ancestor contains [data-barba-prevent=\"all\"].\n */\nconst preventAll: PreventCheck = ({ el }) =>\n  Boolean(\n    el.closest(`[${schemaAttribute.prefix}-${schemaAttribute.prevent}=\"all\"]`)\n  );\n\n/**\n * If the link is the current URL.\n *\n * > Not in the test suite.\n */\nconst sameUrl: PreventCheck = ({ href }) =>\n  url.clean(href) === url.clean() && url.getPort(href) === url.getPort();\n\nexport class Prevent extends Ignore {\n  public suite: string[] = [];\n  public tests: Map<string, PreventCheck> = new Map();\n\n  constructor(ignore: IgnoreOption) {\n    super(ignore);\n    this.init();\n  }\n\n  public init(): void {\n    // Add defaults\n    this.add('pushState', pushState);\n    this.add('exists', exists);\n    this.add('newTab', newTab);\n    this.add('blank', blank);\n    this.add('corsDomain', corsDomain);\n    this.add('corsPort', corsPort);\n    this.add('download', download);\n    this.add('preventSelf', preventSelf);\n    this.add('preventAll', preventAll);\n\n    // Outside of the test suite\n    this.add('sameUrl', sameUrl, false);\n  }\n\n  public add(name: string, check: PreventCheck, suite: boolean = true): void {\n    this.tests.set(name, check);\n    suite && this.suite.push(name);\n  }\n\n  /**\n   * Run individual test\n   */\n  public run(name: string, el: Link, event: Event, href: string): boolean {\n    return this.tests.get(name)({\n      el,\n      event,\n      href,\n    });\n  }\n\n  /**\n   * Run test suite\n   */\n  public checkLink(el: Link, event: Event, href: string): boolean {\n    return this.suite.some(name => this.run(name, el, event, href));\n  }\n}\n", "// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\nexport class BarbaError extends Error {\n  /* istanbul ignore next */\n  constructor(\n    public error: Error,\n    public label = 'Barba error',\n    ...params: any[]\n  ) {\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    /* istanbul ignore else */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, BarbaError);\n    }\n\n    this.name = 'BarbaError';\n  }\n}\n", "/**\n * @barba/core/modules/store\n * <br><br>\n * ## Transitions store.\n *\n * - Resolve transition\n * - Manage rules\n *\n * @module core/modules/store\n * @preferred\n */\n\n/***/\n\n// Definitions\nimport {\n  IRule,\n  IRules,\n  ITransitionData,\n  ITransitionFilters,\n  ITransitionOnce,\n  ITransitionPage,\n  RuleName,\n} from '../defs';\n\n// Modules\nimport { Logger } from './Logger';\n\nexport class Store {\n  public logger: Logger = new Logger('@barba/core');\n  /**\n   * All registered transitions.\n   */\n  public all: ITransitionPage[] = [];\n  /**\n   * \"Page only\" registered transitions.\n   */\n  public page: ITransitionPage[] = [];\n  /**\n   * \"Once only\" registered transitions.\n   */\n  public once: ITransitionOnce[] = [];\n  /**\n   * Rules for transition resolution.\n   *\n   * Defaults:\n   *\n   * - namespace\n   * - custom\n   */\n  private _rules: IRule[] = [\n    {\n      name: 'namespace',\n      type: 'strings',\n    },\n    {\n      name: 'custom',\n      type: 'function',\n    },\n  ];\n\n  /**\n   * Init store.\n   */\n  constructor(transitions: ITransitionPage[] = []) {\n    /* istanbul ignore else */\n    if (transitions) {\n      // TODO: add check for valid transitions? criteria? (once || enter && leave)\n      this.all = this.all.concat(transitions);\n    }\n    this.update();\n  }\n\n  /**\n   * Add rule or transition.\n   */\n  public add(type: 'rule' | 'transition', data: any): void {\n    switch (type) {\n      case 'rule':\n        // TODO: check for valid rule\n        this._rules.splice(data.position || 0, 0, data.value);\n        break;\n      case 'transition':\n      default:\n        // TODO: check for valid transition\n        this.all.push(data);\n        break;\n    }\n\n    this.update();\n  }\n\n  /**\n   * Resolve transition.\n   */\n  public resolve(\n    data: ITransitionData,\n    filters: ITransitionFilters = {}\n  ): ITransitionOnce | ITransitionPage {\n    // Filter on \"once\"\n    let transitions = filters.once ? this.once : this.page;\n\n    // Filter on \"self\"\n    if (filters.self) {\n      transitions = transitions.filter(t => t.name && t.name === 'self');\n    } else {\n      transitions = transitions.filter(t => !t.name || t.name !== 'self');\n    }\n\n    // All matching transition infos\n    const matching = new Map();\n\n    // Active = first of valid transitions\n    // sorted by directions (from/to, from || to, \u2026)\n    const active = transitions.find(t => {\n      let valid = true;\n      const match = {};\n\n      if (filters.self && t.name === 'self') {\n        return true;\n      }\n\n      // Check rules\n      this._rules.reverse().forEach(rule => {\n        if (valid) {\n          valid = this._check(t, rule, data, match);\n          // From/to check\n          if (t.from && t.to) {\n            valid =\n              this._check(t, rule, data, match, 'from') &&\n              this._check(t, rule, data, match, 'to');\n          }\n          if (t.from && !t.to) {\n            valid = this._check(t, rule, data, match, 'from');\n          }\n          if (!t.from && t.to) {\n            valid = this._check(t, rule, data, match, 'to');\n          }\n        }\n      });\n\n      matching.set(t, match);\n\n      return valid;\n    });\n\n    const activeMatch = matching.get(active);\n    const transitionType = [];\n    if (filters.once) {\n      transitionType.push('once');\n    } else {\n      transitionType.push('page');\n    }\n    if (filters.self) {\n      transitionType.push('self');\n    }\n\n    if (activeMatch) {\n      // Log resolved transition\n      const infos: any[] = [active];\n      // Log if matching criteria\n      Object.keys(activeMatch).length > 0 && infos.push(activeMatch);\n\n      this.logger.info(\n        `Transition found [${transitionType.join(',')}]`,\n        ...infos\n      );\n    } else {\n      this.logger.info(`No transition found [${transitionType.join(',')}]`);\n    }\n\n    return active;\n  }\n\n  /**\n   * ### Update store.\n   *\n   * - Reorder transition by priorities\n   * - Get wait indicator\n   * - Get once transitions\n   */\n  public update(): void {\n    // Reorder by priorities\n    this.all = this.all\n      .map(t => this._addPriority(t))\n      .sort((a, b) => a.priority - b.priority)\n      .reverse()\n      .map(t => {\n        delete t.priority;\n\n        return t;\n      });\n    this.page = this.all.filter(\n      t => t.leave !== undefined || t.enter !== undefined\n    ) as ITransitionPage[];\n    this.once = this.all.filter(t => t.once !== undefined) as ITransitionOnce[];\n  }\n\n  /**\n   * ### Check if transition apply.\n   *\n   * Based on rule, page data and optional direction:\n   *\n   * 1. transition has no rule \"property\":\n   *    - always returns true\n   * 2. transition has rule \"property\":\n   *     - \"strings\" should be present on both side (transition + page) and match\n   *     - \"function\" should return true\n   */\n  private _check(\n    transition: ITransitionPage,\n    rule: IRule,\n    data: ITransitionData,\n    match: any,\n    direction?: 'from' | 'to'\n  ): boolean {\n    let isValid = true;\n    let hasMatch = false;\n    const t = transition;\n    const { name, type } = rule;\n    const strRule = name as IRules['strings'];\n    const objRule = name as IRules['object'];\n    const fnName = name as IRules['function'];\n    const base = direction ? t[direction] : t; // = t || t.from || t.to\n    const page = direction === 'to' ? data.next : data.current; // = current || next\n    const exist = direction ? base && base[name] : base[name];\n\n    // If transition rule exists\n    if (exist) {\n      switch (type) {\n        case 'strings':\n        default: {\n          // Array support\n          const names: string[] = Array.isArray(base[strRule])\n            ? (base[strRule] as string[])\n            : [base[strRule] as string];\n\n          // For matching, prop should be present on both sides and match\n          if (page[strRule] && names.indexOf(page[strRule]) !== -1) {\n            hasMatch = true;\n          }\n          // If transition prop is different from current, not valid\n          if (names.indexOf(page[strRule]) === -1) {\n            isValid = false;\n          }\n          break;\n        }\n\n        case 'object': {\n          // Array support\n          const names: string[] = Array.isArray(base[objRule])\n            ? (base[objRule] as string[])\n            : [base[objRule] as string];\n\n          // For matching, prop should be present on both sides and match\n          if (page[objRule]) {\n            if (\n              page[objRule].name &&\n              names.indexOf(page[objRule].name) !== -1\n            ) {\n              hasMatch = true;\n            }\n            // If transition prop is different from current, not valid\n            if (names.indexOf(page[objRule].name) === -1) {\n              isValid = false;\n            }\n          } else {\n            isValid = false;\n          }\n          break;\n        }\n\n        case 'function':\n          if (base[fnName](data)) {\n            hasMatch = true;\n          } else {\n            isValid = false;\n          }\n          break;\n      }\n\n      if (hasMatch) {\n        if (direction) {\n          match[direction] = match[direction] || {};\n          match[direction][name] = t[direction][name];\n        } else {\n          match[name] = t[name];\n        }\n      }\n    }\n\n    return isValid;\n  }\n\n  /**\n   * ### Calculate transition priority.\n   *\n   * Based on:\n   *\n   * - rule \"position\" (index) give tens, hundreds, thousands, \u2026\n   * - from/to properties give units (0, 1 or 2)\n   */\n  private _calculatePriority(\n    t: ITransitionPage,\n    ruleName: RuleName,\n    ruleIndex: number\n  ): number {\n    let priority = 0;\n\n    if (\n      t[ruleName] ||\n      (t.from && t.from[ruleName]) ||\n      (t.to && t.to[ruleName])\n    ) {\n      priority += Math.pow(10, ruleIndex);\n\n      if (t.from && t.from[ruleName]) {\n        priority += 1;\n      }\n      if (t.to && t.to[ruleName]) {\n        priority += 2;\n      }\n    }\n\n    return priority;\n  }\n\n  private _addPriority(t: ITransitionPage): ITransitionPage {\n    t.priority = 0;\n    let priority = 0;\n\n    this._rules.forEach((rule, i) => {\n      const { name } = rule;\n      const index = i + 1;\n\n      priority += this._calculatePriority(t, name, index);\n    });\n\n    t.priority = priority;\n\n    return t;\n  }\n}\n", "/**\n * @barba/core/modules/transitions\n * <br><br>\n * ## Transitions manager.\n *\n * - Handle hooks and transition lifecycle\n *\n * @module core/modules/transitions\n * @preferred\n */\n\n/***/\n\n// Definitions\nimport {\n  HooksTransition,\n  HooksTransitionMap,\n  ITransitionData,\n  ITransitionFilters,\n  ITransitionOnce,\n  ITransitionPage,\n  Wrapper,\n} from '../defs';\n// Hooks\nimport { hooks } from '../hooks';\n// Utils\nimport { dom, helpers, runAsync } from '../utils';\n// Modules\nimport { BarbaError } from './Error';\nimport { Logger } from './Logger';\nimport { Store } from './Store';\n\nexport class Transitions {\n  public logger: Logger = new Logger('@barba/core');\n  public store: Store;\n  private _running: boolean = false;\n\n  constructor(transitions: ITransitionPage[] = []) {\n    this.store = new Store(transitions);\n  }\n\n  /**\n   * Get resolved transition\n   *\n   * - based on data\n   */\n  public get(\n    data: ITransitionData,\n    filters?: ITransitionFilters\n  ): ITransitionOnce | ITransitionPage {\n    return this.store.resolve(data, filters);\n  }\n\n  /**\n   * Animation running status.\n   */\n  get isRunning(): boolean {\n    return this._running;\n  }\n  set isRunning(status: boolean) {\n    this._running = status;\n  }\n\n  /**\n   * Check for registered once transition(s).\n   */\n  get hasOnce(): boolean {\n    return this.store.once.length > 0;\n  }\n\n  /**\n   * Check for registered self transition.\n   */\n  get hasSelf(): boolean {\n    return this.store.all.some(t => t.name === 'self');\n  }\n\n  /**\n   * ### Wait indicator.\n   *\n   * Tells Barba to get next page data<br>\n   * before starting the resolution<br>\n   * because some registered transitions need<br>\n   * next page data to be resolved (eg: `sync: true`, `to: { namespace }`, \u2026)\n   */\n  get shouldWait(): boolean {\n    return this.store.all.some(t => (t.to && !t.to.route) || t.sync);\n  }\n\n  /**\n   * ### Do \"once\" transition.\n   *\n   * Hooks: see [[HooksOnce]].\n   */\n  public async doOnce({\n    data,\n    transition,\n  }: {\n    data: ITransitionData;\n    transition: ITransitionOnce;\n  }) {\n    const t = transition || {};\n    this._running = true;\n\n    try {\n      await this._doAsyncHook('beforeOnce', data, t);\n      await this.once(data, t);\n      await this._doAsyncHook('afterOnce', data, t);\n    } catch (error) {\n      this._running = false;\n\n      this.logger.debug('Transition error [before/after/once]');\n      this.logger.error(error);\n    }\n\n    this._running = false;\n  }\n\n  /**\n   * ### Do \"page\" transition.\n   *\n   * Hooks: see [[HooksPage]].\n   *\n   * `sync: false` (default) order:\n   *\n   * 1. before\n   * 2. beforeLeave\n   * 3. leave\n   * 4. afterLeave\n   * 5. beforeEnter\n   * 6. enter\n   * 7. afterEnter\n   * 8. after\n   *\n   * `sync: true` order:\n   *\n   * 1. before\n   * 2. beforeLeave\n   * 3. beforeEnter\n   * 4. leave & enter\n   * 5. afterLeave\n   * 6. afterEnter\n   * 7. after\n   */\n  public async doPage({\n    data,\n    transition,\n    page,\n    wrapper,\n  }: {\n    data: ITransitionData;\n    transition: ITransitionPage;\n    page: Promise<string | void>;\n    wrapper: Wrapper;\n  }) {\n    const t = transition || {};\n    const sync = t.sync === true || false;\n\n    this._running = true;\n\n    try {\n      // Check sync mode, wait for next content\n      if (sync) {\n        await helpers.update(page, data);\n      }\n\n      await this._doAsyncHook('before', data, t);\n\n      if (sync) {\n        try {\n          await this.add(data, wrapper);\n          // Before actions\n          await this._doAsyncHook('beforeLeave', data, t);\n          await this._doAsyncHook('beforeEnter', data, t);\n\n          // Actions\n          await Promise.all([this.leave(data, t), this.enter(data, t)]);\n\n          // After actions\n          await this._doAsyncHook('afterLeave', data, t);\n          await this._doAsyncHook('afterEnter', data, t);\n        } catch (error) {\n          // this.logger.debug('Transition error [sync]');\n          // this.logger.error(error);\n          if (this._isTransitionError(error)) {\n            throw new BarbaError(error, 'Transition error [sync]');\n          }\n        }\n      } else {\n        let leaveResult: any = false;\n\n        try {\n          // Leave\n          await this._doAsyncHook('beforeLeave', data, t);\n\n          leaveResult = await Promise.all([\n            this.leave(data, t),\n            helpers.update(page, data),\n          ]).then(values => values[0]);\n\n          await this._doAsyncHook('afterLeave', data, t);\n\n          // TODO: check here \"valid\" page result\n          // before going further\n        } catch (error) {\n          // this.logger.debug('Transition error [before/after/leave]');\n          // this.logger.error(error);\n          if (this._isTransitionError(error)) {\n            throw new BarbaError(\n              error,\n              'Transition error [before/after/leave]'\n            );\n          }\n        }\n\n        try {\n          // Enter\n          /* istanbul ignore else */\n          if (leaveResult !== false) {\n            await this.add(data, wrapper);\n\n            await this._doAsyncHook('beforeEnter', data, t);\n            await this.enter(data, t, leaveResult);\n            await this._doAsyncHook('afterEnter', data, t);\n          }\n        } catch (error) {\n          // this.logger.debug('Transition error [before/after/enter]');\n          // this.logger.error(error);\n          if (this._isTransitionError(error)) {\n            throw new BarbaError(\n              error,\n              'Transition error [before/after/enter]'\n            );\n          }\n        }\n      }\n\n      // Remove current contaienr\n      await this.remove(data);\n\n      await this._doAsyncHook('after', data, t);\n    } catch (error) {\n      this._running = false;\n\n      // If \"custom/specific\" barba error.\n      /* istanbul ignore else */\n      if (error.name && error.name === 'BarbaError') {\n        this.logger.debug(error.label);\n        this.logger.error(error.error);\n\n        throw error;\n      }\n\n      this.logger.debug('Transition error [page]');\n      this.logger.error(error);\n\n      throw error;\n    }\n\n    this._running = false;\n  }\n\n  /**\n   * Once hook + async \"once\" transition.\n   */\n  public async once(data: ITransitionData, t: ITransitionOnce): Promise<void> {\n    await hooks.do('once', data, t);\n\n    return t.once ? runAsync(t.once, t)(data) : Promise.resolve();\n  }\n\n  /**\n   * Leave hook + async \"leave\" transition.\n   */\n  public async leave(data: ITransitionData, t: ITransitionPage): Promise<any> {\n    await hooks.do('leave', data, t);\n\n    return t.leave ? runAsync(t.leave, t)(data) : Promise.resolve();\n  }\n\n  /**\n   * Enter hook + async \"enter\" transition.\n   */\n  public async enter(\n    data: ITransitionData,\n    t: ITransitionPage,\n    leaveResult?: any\n  ): Promise<void> {\n    await hooks.do('enter', data, t);\n\n    return t.enter\n      ? runAsync(t.enter, t)(data, leaveResult)\n      : Promise.resolve();\n  }\n\n  /**\n   * Add next container.\n   */\n  public async add(data: ITransitionData, wrapper: Wrapper): Promise<void> {\n    dom.addContainer(data.next.container, wrapper);\n    hooks.do('nextAdded', data);\n  }\n\n  /**\n   * Remove current container.\n   */\n  public async remove(data: ITransitionData): Promise<void> {\n    dom.removeContainer(data.current.container);\n    hooks.do('currentRemoved', data);\n  }\n\n  private _isTransitionError(error: any) {\n    if (error.message) {\n      // Errors from request\n      return !/Timeout error|Fetch error/.test(error.message);\n    }\n\n    if (error.status) {\n      // Errors from request\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Do hooks + async transition methods.\n   */\n  private async _doAsyncHook(\n    hook: HooksTransition,\n    data: ITransitionData,\n    t: HooksTransitionMap\n  ): Promise<void> {\n    await hooks.do(hook, data, t);\n\n    return t[hook] ? runAsync(t[hook], t)(data) : Promise.resolve();\n  }\n}\n", "/**\n * @barba/core/modules/views\n * <br><br>\n * ## Views manager.\n *\n * @module core/modules/views\n * @preferred\n */\n\n/***/\n\n// Definitions\nimport { HooksView, IView, IViewData } from '../defs';\n// Hooks\nimport { hooks } from '../hooks';\n// Utils\nimport { runAsync } from '../utils';\n// Types\ntype Hook = (data: IViewData) => Promise<void>;\n\nexport class Views {\n  /**\n   * Available hook names for views.\n   */\n  public names: HooksView[] = [\n    'beforeLeave',\n    'afterLeave',\n    'beforeEnter',\n    'afterEnter',\n  ];\n  /**\n   * Registered views by namespace.\n   */\n  public byNamespace: Map<string, IView> = new Map();\n\n  /**\n   * Init views.\n   */\n  constructor(views: IView[]) {\n    if (views.length === 0) {\n      return;\n    }\n\n    // TODO: add check\n    // for valid views? criteria? (namespace property, string ?)\n    // or duplicate\n    views.forEach(view => {\n      this.byNamespace.set(view.namespace, view);\n    });\n\n    this.names.forEach(name => {\n      hooks[name](this._createHook(name));\n    });\n  }\n\n  /**\n   * Create the hook method.\n   *\n   * - get view based on namespace\n   * - execute callback with transition data\n   */\n  private _createHook(name: HooksView): Hook {\n    return data => {\n      const { namespace } = name.match(/enter/i) ? data.next : data.current;\n      const view = this.byNamespace.get(namespace);\n\n      // TODO: manage self\u2026\n      // if (view && data.trigger !== 'self') {\n      if (view && view[name]) {\n        return runAsync(view[name], view)(data);\n      }\n\n      return Promise.resolve();\n    };\n  }\n}\n", "// Element.prototype.matches polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill\nif (!Element.prototype.matches) {\n  Element.prototype.matches =\n    (Element as any).prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n}\n\n// Element.prototype.closest polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\nif (!Element.prototype.closest) {\n  Element.prototype.closest = function closest(s: string) {\n    let el = this;\n\n    do {\n      if (el.matches(s)) {\n        return el;\n      }\n\n      el = (el.parentElement || el.parentNode) as Element;\n    } while (el !== null && el.nodeType === 1);\n\n    return null;\n  };\n}\n", "/**\n * @module core/schemas\n */\n\n// Definitions\nimport { ISchemaPage } from '../defs';\n\n/**\n * See [[ISchemaPage]]\n */\nexport const schemaPage: ISchemaPage = {\n  container: null,\n  html: '',\n  namespace: '',\n  url: {\n    hash: '',\n    href: '',\n    path: '',\n    port: null,\n    query: {},\n  },\n};\n", "/**\n * @barba/core\n * <br><br>\n * ## Barba core object\n *\n * Main methods:\n *\n * - `.init()` for initialization with options\n * - `.use()` for plugins\n *\n * @module core\n */\n\n/***/\n\nimport { version } from '../package.json';\n// Definitions\nimport {\n  IBarbaOptions,\n  IBarbaPlugin,\n  IgnoreOption,\n  ISchemaPage,\n  ITransitionData,\n  ITransitionOnce,\n  ITransitionPage,\n  Link,\n  LinkEvent,\n  RequestCustomError,\n  RequestErrorOrResponse,\n  SchemaAttributeValues,\n  Trigger,\n  Wrapper,\n} from './defs';\n// Hooks\nimport { hooks } from './hooks';\n// Modules\nimport { Cache } from './modules/Cache';\nimport { Logger } from './modules/Logger';\nimport { Prevent } from './modules/Prevent';\nimport { Transitions } from './modules/Transitions';\nimport { Views } from './modules/Views';\n// Polyfills\nimport './polyfills';\n// Schemas\nimport { schemaAttribute } from './schemas/attribute';\nimport { schemaPage } from './schemas/page';\n// Utils\nimport { dom, helpers, history, request, url } from './utils';\n\nexport class Core {\n  /**\n   * Version.\n   */\n  public version: string = version;\n  /**\n   * Schemas.\n   */\n  public schemaPage: ISchemaPage = schemaPage;\n  /**\n   * Logger class, allows plugins to create Logger.\n   */\n  public Logger: typeof Logger = Logger;\n  /**\n   * Barba logger.\n   */\n  public logger: Logger = new Logger('@barba/core');\n  /**\n   * Plugins.\n   */\n  public plugins: Array<IBarbaPlugin<any>> = [];\n  /**\n   * Options\n   */\n  public timeout: number;\n  public cacheIgnore: IgnoreOption;\n  public prefetchIgnore: IgnoreOption;\n  public preventRunning: boolean;\n  /**\n   * Hooks\n   */\n  public hooks = hooks;\n  /**\n   * Modules.\n   */\n  // public history: History;\n  public cache: Cache;\n  public prevent: Prevent;\n  public transitions: Transitions;\n  public views: Views;\n  /**\n   * Utils.\n   */\n  public dom = dom;\n  public helpers = helpers;\n  public history = history;\n  public request = request;\n  public url = url;\n\n  private _data: ITransitionData;\n  private _requestCustomError: RequestCustomError;\n  private _wrapper: Wrapper;\n\n  /**\n   * ### Init plugin with options.\n   *\n   * See [[IBarbaPlugin]] for more details.\n   */\n  public use<T>(plugin: IBarbaPlugin<T>, options?: T): void {\n    const installedPlugins = this.plugins;\n\n    // Plugin installation\n    if (installedPlugins.indexOf(plugin) > -1) {\n      this.logger.warn(`Plugin [${plugin.name}] already installed.`);\n\n      return;\n    }\n\n    if (typeof plugin.install !== 'function') {\n      this.logger.warn(`Plugin [${plugin.name}] has no \"install\" method.`);\n\n      return;\n    }\n\n    plugin.install(this, options);\n    installedPlugins.push(plugin);\n  }\n\n  /**\n   * ### Init barba with options.\n   *\n   * See [[IBarbaOptions]] for more details.\n   *\n   * Default values are:\n   *\n   * - transitions: `[]`\n   * - views: `[]`\n   * - schema: [[SchemaAttribute]]\n   * - timeout: `2e3`\n   * - cacheIgnore: `false`\n   * - prefetchIgnore: `false`\n   * - preventRunning: `false`\n   * - prevent: `null`,\n   * - debug: `false`\n   * - logLevel: `'debug'`\n   */\n  public init(\n    /** @ignore */ {\n      transitions = [],\n      views = [],\n      schema = schemaAttribute,\n      requestError,\n      timeout = 2e3,\n      cacheIgnore = false,\n      prefetchIgnore = false,\n      /* istanbul ignore next */\n      preventRunning = false,\n      prevent: preventCustom = null,\n      debug = false,\n      logLevel = 'off',\n    }: IBarbaOptions = {}\n  ) {\n    // 0. Set logger level and print version\n    Logger.setLevel(debug === true ? 'debug' : logLevel);\n    this.logger.info(this.version);\n\n    // 1. Manage options\n    Object.keys(schema).forEach(k => {\n      const attr = k as SchemaAttributeValues;\n\n      /* istanbul ignore else */\n      if (schemaAttribute[attr]) {\n        schemaAttribute[attr] = schema[attr];\n      }\n    });\n    this._requestCustomError = requestError;\n    this.timeout = timeout;\n    this.cacheIgnore = cacheIgnore;\n    this.prefetchIgnore = prefetchIgnore;\n    this.preventRunning = preventRunning;\n\n    // 2. Get and check wrapper\n    this._wrapper = this.dom.getWrapper();\n    if (!this._wrapper) {\n      throw new Error('[@barba/core] No Barba wrapper found');\n    }\n    this._wrapper.setAttribute('aria-live', 'polite'); // A11y\n\n    // 3. Init pages (get \"current\" data)\n    this._resetData();\n\n    const { current } = this.data;\n\n    if (!current.container) {\n      throw new Error('[@barba/core] No Barba container found');\n    }\n\n    // 4. Init other modules\n    this.cache = new Cache(cacheIgnore);\n    this.prevent = new Prevent(prefetchIgnore);\n    this.transitions = new Transitions(transitions);\n    this.views = new Views(views);\n\n    // Add prevent custom\n    if (preventCustom !== null) {\n      if (typeof preventCustom !== 'function') {\n        throw new Error('[@barba/core] Prevent should be a function');\n      }\n\n      this.prevent.add('preventCustom', preventCustom);\n    }\n\n    // 5. Use \"current\" data\n    // Init history\n    this.history.init(current.url.href, current.namespace);\n    // Add to cache\n    // TODO: do not cache renderer HTML, only request results\u2026\n    // this.cache.set(current.url.href, Promise.resolve(current.html), 'init');\n\n    // 6. Bind context\n    this._onLinkEnter = this._onLinkEnter.bind(this);\n    this._onLinkClick = this._onLinkClick.bind(this);\n    this._onStateChange = this._onStateChange.bind(this);\n    this._bind();\n\n    // 7. Init plugins\n    this.plugins.forEach(plugin => plugin.init());\n\n    // 8. Barba ready\n    // Set next + trigger for once and `beforeEnter`/`afterEnter` view on page load.\n    const onceData = this.data;\n\n    onceData.trigger = 'barba';\n    onceData.next = onceData.current;\n    onceData.current = { ...this.schemaPage };\n    this.hooks.do('ready', onceData);\n\n    // 9. Finally, do once\u2026\n    this.once(onceData);\n\n    // Clean data for first barba transition\u2026\n    this._resetData();\n  }\n\n  public destroy(): void {\n    this._resetData();\n    this._unbind();\n    this.history.clear();\n    this.hooks.clear();\n    this.plugins = [];\n  }\n\n  get data(): ITransitionData {\n    return this._data;\n  }\n\n  get wrapper(): HTMLElement {\n    return this._wrapper;\n  }\n\n  /**\n   * ### Force a page change without Barba transition.\n   */\n  public force(href: string): void {\n    // DEV\n    // Can be used waiting animation cancellation management\u2026\n    window.location.assign(href);\n  }\n\n  /**\n   * ### Go for a Barba transition.\n   *\n   * Manage \"self page\" href:\n   *\n   * - if same url and no self transition, keep default behavior\n   *   - link: reload the page\n   *   - anchor: scroll to\n   * - if same url with self transition, use it\n   * - then start a page transition.\n   */\n  public go(\n    href: string,\n    trigger: Trigger = 'barba',\n    e?: LinkEvent | PopStateEvent\n  ): Promise<void> {\n    // If animation running, force reload\n    if (this.transitions.isRunning) {\n      this.force(href);\n\n      return;\n    }\n\n    let self = false;\n\n    // Check prevent sameURL against current history\n    // + state check\n    // + update trigger with direction\n    if (trigger === 'popstate') {\n      self =\n        this.history.current &&\n        this.url.getPath(this.history.current.url) === this.url.getPath(href);\n    } else {\n      self = this.prevent.run('sameUrl', null, null, href);\n    }\n\n    if (self && !this.transitions.hasSelf) {\n      return;\n    }\n\n    trigger = this.history.change(href, trigger, e);\n\n    if (e) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n\n    return this.page(href, trigger, self);\n  }\n\n  /**\n   * ### Start an \"once\" transition.\n   *\n   * If some registered \"once\" transition,\n   * get the \"resolved\" transition from the store and start it.\n   */\n  public async once(readyData: ITransitionData): Promise<void> {\n    await this.hooks.do('beforeEnter', readyData);\n\n    // Check if once transition\n    if (this.transitions.hasOnce) {\n      const transition = this.transitions.get(readyData, {\n        once: true,\n      }) as ITransitionOnce;\n\n      await this.transitions.doOnce({ transition, data: readyData });\n    }\n\n    await this.hooks.do('afterEnter', readyData);\n  }\n\n  /**\n   * ### Start a \"page\" transition.\n   *\n   * 1. If no running transition, updates data with full URL properties and trigger.\n   * 2. Get page from cache or init request.\n   * 3. Wait if some transitions need \"next\" data (`sync: true`, `to: \u2026`).\n   * 4. Manage the history, depending on trigger.\n   * 5. Get \"data\" and trigger \"go\" hook.\n   * 6. Get the \"resolved\" transition from the store and start it.\n   * 7. Update title and reset data (current, next = undefined).\n   *\n   * > If \"self\", use the \"self\" transition\n   */\n  public async page(\n    href: string,\n    trigger: Trigger,\n    self: boolean\n  ): Promise<void> {\n    this.data.next.url = {\n      href,\n      ...this.url.parse(href),\n    };\n    this.data.trigger = trigger;\n\n    const page = this.cache.has(href)\n      ? this.cache.update(href, { action: 'click' }).request\n      : this.cache.set(\n          href,\n          this.request(\n            href,\n            this.timeout,\n            this.onRequestError.bind(this, trigger)\n          ),\n          'click'\n        ).request;\n\n    // Need to wait before getting the right transition\n    if (this.transitions.shouldWait) {\n      await helpers.update(page, this.data);\n    }\n\n    const data = this.data;\n\n    // Hook: between trigger and transition\n    // Can be used to resolve \"route\"\u2026\n    await this.hooks.do('page', data);\n\n    try {\n      const transition = this.transitions.get(data, {\n        once: false,\n        self,\n      }) as ITransitionPage;\n\n      await this.transitions.doPage({\n        data,\n        page,\n        transition,\n        wrapper: this._wrapper,\n      });\n\n      this._resetData();\n    } catch (error) {\n      // Something went wrong (rejected promise, error, 404, 505, other\u2026)\n      // TODO: manage / use cases for cancellation\n      // this.logger.debug('Transition cancelled');\n\n      // If transition error and no debug mode, force reload page.\n      /* istanbul ignore else */\n      if (Logger.getLevel() === 0) {\n        this.force(data.current.url.href);\n      }\n    }\n  }\n\n  /**\n   * When a request error occurs.\n   *\n   * Allow the user to manage request error. (E.g: 404)\n   */\n  public onRequestError(trigger: Trigger, ...args: any): boolean {\n    // Cancel transition status\n    this.transitions.isRunning = false;\n\n    const [href, response]: [string, RequestErrorOrResponse] = args;\n    const action = this.cache.getAction(href);\n    this.cache.delete(href);\n\n    // Custom requestError returning false will return here.\n    if (\n      this._requestCustomError &&\n      this._requestCustomError(trigger, action, href, response) === false\n    ) {\n      return false;\n    }\n\n    // Force page change\n    if (action === 'click') {\n      this.force(href);\n    }\n    return false;\n  }\n\n  /**\n   * Programmatically prefetch\n   */\n  public prefetch(href: string) {\n    // Already in cache\n    /* istanbul ignore next */\n    if (this.cache.has(href)) {\n      return;\n    }\n\n    this.cache.set(\n      href,\n      this.request(\n        href,\n        this.timeout,\n        this.onRequestError.bind(this, 'barba')\n      ).catch((error: RequestErrorOrResponse) => {\n        this.logger.error(error);\n      }),\n      'prefetch'\n    );\n  }\n\n  /**\n   * Bind event listeners.\n   */\n  private _bind(): void {\n    /* istanbul ignore else */\n    if (this.prefetchIgnore !== true) {\n      document.addEventListener('mouseover', this._onLinkEnter);\n      document.addEventListener('touchstart', this._onLinkEnter);\n    }\n    document.addEventListener('click', this._onLinkClick);\n    window.addEventListener('popstate', this._onStateChange);\n  }\n\n  /**\n   * Bind event listeners.\n   */\n  private _unbind(): void {\n    /* istanbul ignore else */\n    if (this.prefetchIgnore !== true) {\n      document.removeEventListener('mouseover', this._onLinkEnter);\n      document.removeEventListener('touchstart', this._onLinkEnter);\n    }\n    document.removeEventListener('click', this._onLinkClick);\n    window.removeEventListener('popstate', this._onStateChange);\n  }\n\n  /**\n   * When a element is entered.\n   *\n   * Get valid link element.\n   * Cache URL if needed.\n   */\n  private _onLinkEnter(e: LinkEvent): void {\n    const link = this._getLinkElement(e);\n\n    if (!link) {\n      return;\n    }\n\n    const href = this.dom.getHref(link);\n\n    if (this.prevent.checkHref(href)) {\n      return;\n    }\n\n    // Already in cache\n    if (this.cache.has(href)) {\n      return;\n    }\n\n    this.cache.set(\n      href,\n      this.request(\n        href,\n        this.timeout,\n        this.onRequestError.bind(this, link)\n      ).catch((error: RequestErrorOrResponse) => {\n        this.logger.error(error);\n      }),\n      'enter'\n    );\n  }\n\n  /**\n   * When an element is clicked.\n   *\n   * Get valid link element.\n   * Prevent same URL.\n   * Go for a Barba transition.\n   */\n  private _onLinkClick(e: LinkEvent): void {\n    // This use `prevent.checkLink` under the hood to get eligible link.\n    const link = this._getLinkElement(e);\n\n    if (!link) {\n      return;\n    }\n\n    if (this.transitions.isRunning && this.preventRunning) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      return;\n    }\n\n    this.go(this.dom.getHref(link), link, e);\n  }\n\n  /**\n   * When History state changes.\n   *\n   * Get \"href\" from URL\n   * Go for a Barba transition.\n   */\n  private _onStateChange(e: PopStateEvent): void {\n    this.go(this.url.getHref(), 'popstate', e);\n  }\n\n  /**\n   * Get a valid link ancestor.\n   *\n   * Check for a \"href\" attribute.\n   * Then check if eligible for Barba.\n   */\n  private _getLinkElement(e: LinkEvent): Link {\n    let el = e.target as Link;\n\n    while (el && !this.dom.getHref(el)) {\n      el = (el as HTMLElement).parentNode as Link;\n    }\n\n    // Check prevent\n    if (!el || this.prevent.checkLink(el, e, this.dom.getHref(el))) {\n      return;\n    }\n\n    return el;\n  }\n\n  /**\n   * Reset pages data.\n   *\n   * Set \"current\" and unset \"next\".\n   */\n  private _resetData() {\n    const href = this.url.getHref();\n    const current = {\n      container: this.dom.getContainer(),\n      html: this.dom.getHtml(),\n      namespace: this.dom.getNamespace(),\n      url: {\n        href,\n        ...this.url.parse(href),\n      },\n    };\n\n    this._data = {\n      current,\n      next: { ...this.schemaPage },\n      trigger: undefined,\n    };\n\n    this.hooks.do('reset', this.data);\n  }\n}\n\nconst core = new Core();\n\nexport default core;\n", "import d from \"./node_modules/@barba/core/dist/barba.mjs\";export default d;"],
  "mappings": "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",
  "names": ["_catch", "body", "recover", "result", "e", "then", "Symbol", "iterator", "asyncIterator", "LogLevels", "HookMethods", "_level", "off", "Logger", "t", "source", "this", "_source", "getLevel", "setLevel", "name", "error", "objects", "_log", "console", "warn", "warning", "info", "debug", "log", "fn", "level", "apply", "concat", "pathToRegexp", "regexpToFunction", "parse", "tokensToFunction", "tokensToRegExp", "DEFAULT_DELIMITER", "PATH_REGEXP", "RegExp", "join", "str", "options", "res", "tokens", "key", "index", "path", "defaultDelimiter", "delimiter", "whitelist", "pathEscaped", "exec", "m", "escaped", "offset", "slice", "length", "prev", "capture", "group", "modifier", "k", "c", "indexOf", "push", "pattern", "prefix", "optional", "repeat", "escapeGroup", "escapeString", "substr", "re", "keys", "pathname", "params", "decode", "decodeURIComponent", "i", "split", "map", "value", "matches", "Array", "flags", "data", "encode", "encodeURIComponent", "validate", "token", "segment", "isArray", "TypeError", "j", "test", "String", "replace", "sensitive", "strict", "start", "end", "endsWith", "route", "endToken", "isEndDelimited", "groups", "match", "parts", "schemaAttribute", "container", "history", "namespace", "prevent", "wrapper", "dom", "DOMParser", "n", "toString", "el", "outerHTML", "toDocument", "htmlString", "_parser", "parseFromString", "toElement", "div", "document", "createElement", "innerHTML", "getHtml", "doc", "documentElement", "getWrapper", "scope", "querySelector", "_attr", "getContainer", "removeContainer", "contains", "parentNode", "removeChild", "addContainer", "existingContainer", "_insertAfter", "appendChild", "getNamespace", "ns", "getAttribute", "getHref", "tagName", "toLowerCase", "href", "resolveUrl", "baseVal", "urls", "numUrls", "Error", "base", "arguments", "head", "getElementsByTagName", "insertBefore", "firstChild", "resolved", "a", "newNode", "referenceNode", "nextSibling", "init", "url", "_session", "state", "scroll", "x", "window", "scrollX", "y", "scrollY", "_states", "_pointer", "item", "from", "states", "replaceState", "change", "trigger", "_getDirection", "add", "size", "action", "_getAction", "pushState", "update", "get", "set", "remove", "splice", "pop", "clear", "newStates", "attr", "hasAttribute", "diff", "Math", "abs", "page", "next", "html", "nextDocument", "title", "ptr", "Promise", "resolve", "requestAnimationFrame", "getOrigin", "location", "origin", "getPort", "port", "portString", "substring", "parseInt", "hash", "query", "hashIndex", "queryIndex", "parseQuery", "reduce", "acc", "clean", "request", "ttl", "requestError", "reject", "xhr", "XMLHttpRequest", "onreadystatechange", "readyState", "DONE", "status", "responseText", "statusText", "ontimeout", "err", "onerror", "open", "timeout", "setRequestHeader", "send", "obj", "runAsync", "func", "ctx", "r", "args", "async", "promise", "answer", "isPromise", "hooks", "_this", "Map", "registered", "all", "forEach", "hook", "_this2", "has", "Set", "chain", "_this3", "logger", "_this4", "help", "Ignore", "ignore", "_ignoreAll", "paths", "_ignoreRegexes", "p", "checkHref", "some", "regex", "Cache", "_state", "getRequest", "getAction", "exists", "newTab", "event", "which", "metaKey", "ctrlKey", "shiftKey", "altKey", "blank", "target", "corsDomain", "protocol", "hostname", "corsPort", "download", "preventSelf", "preventAll", "Boolean", "closest", "sameUrl", "Prevent", "check", "suite", "tests", "run", "checkLink", "BarbaError", "label", "o", "captureStackTrace", "Store", "transitions", "type", "_rules", "position", "filters", "once", "filter", "self", "matching", "active", "find", "valid", "reverse", "rule", "_check", "to", "activeMatch", "transitionType", "f", "infos", "Object", "_addPriority", "sort", "b", "priority", "leave", "enter", "transition", "direction", "isValid", "hasMatch", "strRule", "objRule", "fnName", "current", "names", "_calculatePriority", "ruleName", "ruleIndex", "pow", "Transitions", "store", "doOnce", "_running", "u", "_doAsyncHook", "doPage", "s", "sync", "h", "_isTransitionError", "leaveResult", "helpers", "values", "message", "Views", "views", "view", "byNamespace", "_createHook", "Element", "prototype", "msMatchesSelector", "webkitMatchesSelector", "parentElement", "nodeType", "schemaPage", "core", "version", "use", "plugin", "installedPlugins", "plugins", "install", "schema", "v", "cacheIgnore", "prefetchIgnore", "preventRunning", "preventCustom", "g", "logLevel", "E", "_requestCustomError", "_wrapper", "setAttribute", "_resetData", "cache", "_onLinkEnter", "bind", "_onLinkClick", "_onStateChange", "_bind", "onceData", "destroy", "_unbind", "force", "assign", "go", "isRunning", "getPath", "hasSelf", "stopPropagation", "preventDefault", "readyData", "hasOnce", "onRequestError", "shouldWait", "response", "prefetch", "_this5", "addEventListener", "removeEventListener", "link", "_getLinkElement", "_this6", "_data", "undefined"]
}
